{"version":3,"sources":["data.csv","App.js","reportWebVitals.js","index.js"],"names":["App","isOn","setIsOn","useState","timer","setTimer","start","setStart","lastLap","setLastLap","laps","setLaps","predictions","setPredictions","countRef","useRef","useEffect","Papa","parse","data","download","header","skipEmptyLines","complete","result","parsedData","map","row","T","parseFloat","B","parseInt","getPrediction","time","formattedTime","toFixed","match","find","p","formatTime","replace","_jsxs","className","children","_jsx","href","style","gap","onClick","handleStart","Date","now","current","setInterval","handleLap","prediction","handleStop","clearInterval","handleReset","maxWidth","lap","index","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24962f16.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/data.8d4a7db4.csv\";","import React, { useState, useRef, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport data from \"./data.csv\";\n\nconst App = () => {\n  const [isOn, setIsOn] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [start, setStart] = useState(0);\n  const [lastLap, setLastLap] = useState(0);\n  const [laps, setLaps] = useState([]);\n  const [predictions, setPredictions] = useState([]);\n\n  const countRef = useRef(null);\n\n  useEffect(() => {\n    // Load the CSV file on component mount\n    Papa.parse(data, {\n      download: true,\n      header: true,\n      skipEmptyLines: true,\n      complete: (result) => {\n        const parsedData = result.data.map((row) => ({\n          T: parseFloat(row.T),\n          B: parseInt(row.B),\n        }));\n        setPredictions(parsedData);\n      },\n    });\n  }, []);\n\n  const handleStart = () => {\n    setIsOn(true);\n    setStart(Date.now());\n    setLastLap(Date.now());\n\n    countRef.current = setInterval(() => {\n      setTimer(Date.now());\n    }, 1);\n  };\n\n  const handleLap = () => {\n    setLaps([...laps, { time: timer - lastLap, prediction: getPrediction(timer - lastLap) }]);\n    setLastLap(Date.now());\n  };\n\n  const handleStop = () => {\n    clearInterval(countRef.current);\n    setIsOn(false);\n  };\n\n  const handleReset = () => {\n    setStart(0);\n    setTimer(0);\n    setLastLap(0);\n    clearInterval(countRef.current);\n    setIsOn(false);\n    setLaps([]);\n  };\n\n  const getPrediction = (time) => {\n    const formattedTime = parseFloat((time / 1000).toFixed(3));\n    const match = predictions.find((p) => p.T === formattedTime);\n    return match ? match.B : null;\n  };\n\n  const formatTime = (time) => {\n    return (time / 1000).toFixed(3).replace(\".\", \",\");\n  };\n\n  return (\n    <div className=\"app\">\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-3\">\n        <div className=\"container\">\n          <a className=\"navbar-brand\" href=\"/\">\n            Gambling Stopwatch\n          </a>\n        </div>\n      </nav>\n      <div className=\"container\">\n        <p className=\"h1\">{formatTime(timer - start)}</p>\n        <div className=\"buttons d-flex\" style={{ gap: 10 }}>\n          {isOn === false ? (\n            <button className=\"btn btn-primary btn-lg\" onClick={handleStart}>\n              Start\n            </button>\n          ) : (\n            <button className=\"btn btn-success btn-lg\" onClick={handleLap}>\n              Lap\n            </button>\n          )}\n\n          <button className=\"btn btn-danger btn-lg\" onClick={handleStop}>\n            Stop\n          </button>\n          <button className=\"btn btn-warning btn-lg\" onClick={handleReset}>\n            Reset\n          </button>\n        </div>\n        <table className=\"table table-sm mt-2\" style={{ maxWidth: 250 }}>\n          <thead>\n            <tr>\n              <th>Lap</th>\n              <th>Time</th>\n              <th>Prediction</th>\n            </tr>\n          </thead>\n          <tbody>\n            {laps.map((lap, index) => (\n              <tr key={index}>\n                <td>{index + 1}</td>\n                <td>{formatTime(lap.time)}</td>\n                <td>{lap.prediction !== null ? lap.prediction : \"\"}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}